<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.79 [en] (Win98; U) [Netscape]">
   <meta name="Author" content="Bob Myers">
   <title>Assignment 1</title>
</head>
<body text="#000000" bgcolor="#FFFFFF">

<h2>
Programming Assignment #1</h2>
Due: Monday, Sept 18, 11:59 PM

<p><b><font size=+1>Objective:</font></b>&nbsp; Upon completing this assignment,
you should be able to implement a simple class, as well as gain a better
understanding of the building and use of classes and objects.

<h3>
Task:</h3>

You are to write a class called <tt>House</tt>, using filenames
<b><tt>house.h</tt></b> and <b><tt>house.cpp</tt></b>, that will 
allow creation and handling of House objects, as described below.

<h3>House Dimensions</h3>

Each house object should be pictured as follows:
<ul>
<li>The base of the house is a square with a given side length. 
Minimum length is 3, maximum is 37.   This will be referred to as 
the base size of the house.</li>
<li>The roof of the house is an equilateral triangle
 <ul><li>Recall that an equilateral triangle is one that has all three
         sides of equal length</li>
 </ul>
</li>
<li>The roof will always overhang the base by one length unit on each 
side, so the length of the triangle's side will be 2 more than the 
length of the square's side</li>
<li>Any calculations for the object are based on the dimensions 
described above.  The ascii drawing we will do is an approximation of 
this</li>
<li>Example house image, with base size 5:<br>
<img src="hw1files/house.png">
</li>
</ul>

<h3>
Class Details</h3>

<ol>

<li> The single constructor for the House class should have 3 
parameters: an integer size (required), which is the base size of the 
house; a border character (optional, with a default of <tt>'X'</tt> -- 
uppercase); 
and a fill character (optional, with a default of <tt>'*'</tt>). If the 
size provided is less than 3, set the size to 3. If the size provided is 
greater than 37, set the size to 37. The class will need to provide 
internal storage for any member data that must be kept track of. 
<br>&nbsp; </li>


<li>There should be member functions <b><tt>GetSize</tt></b>, 
<b><tt>Perimeter</tt></b>, and <b><tt>Area</tt></b>, which will return 
the house's base size, the perimeter of the house, and the area of the 
house, respectively. The first 2 should return integer results. The 
<tt>Area</tt> function should return its result as a double. Note that 
for Area, you'll need to compute the areas of the 
triangle roof and the square base and combine them.
<br>&nbsp;</li>


<li>There should be member functions <b><tt>Grow</tt></b> and 
<b><tt>Shrink</tt></b>, which will increase or decrease (respectively) 
the base size of the house by 1, unless this would cause the size to go 
out of bounds (out of the 3-37 range); in the latter case, <tt>Grow</tt> 
and <tt>Shrink</tt> should make no change to the size. 
<br>&nbsp; </li>

<li>There should be member functions <b><tt>SetBorder</tt></b> and 
<b><tt>SetFill</tt></b>, which each allow a new border or fill character 
(respectively) to be passed in as a parameter. There is a chart of ASCII 
characters in an appendix of the textbook. The characters that should be 
allowed for the border or fill characters are any characters from the 
<tt>'!'</tt> (ascii 33) up through the <tt>'~'</tt> (ascii 126). If an 
attempt is made to set the border or fill characters to anything outisde 
the allowable range, the function should set the border or fill back to 
its original default (the ones listed for the constructor -- the border 
default is <tt>'X'</tt> and the fill default is <tt>'*'</tt>).
<br>&nbsp;
</li>

<li>There should be a member function called <b><tt>Draw</tt></b> that 
will display a picture of the house on the screen. You may assume 
that 
the cursor is already at the beginning of a line when the function begins, 
and you should make sure that you leave the cursor on the line following 
the picture afterwards (i.e. print a newline after the last line of the 
house). Use the border character to draw the border of the house, 
and use the fill character to draw the internal characters. Separate the 
characters on a line in the picture by a single space to make the house
look more proportional (to approximate the look of an equilateral 
triangle and a square). You may not use formatting functions like 
<tt>setw</tt> to draw the figure.  This must be handled with loops.  
(You will only print out the newline, spaces, the border character, and 
maybe the fill character on any given line).  Note that the bottom of 
the roof and the top of the base will be on a shared line -- the 
overhang area will be border characters, but everything internal will be 
fills.   See the sample run linked below to see exactly how this should 
look.
<br>&nbsp; </li>

<li>Provide a member function called <b><tt>Summary</tt></b> that displays 
all information about a house: its base size, perimeter, area, and a 
picture of what it looks like. When displaying the area (decimal data), 
always show exactly 2 decimal places. Your output should be in the exact same 
format as mine (seen in the linked sample run below)

<br>&nbsp;
</li>


<li>I am providing a sample driver program (called <tt>driver.cpp</tt>) 
that uses objects of type House and illustrates sample usage of the 
member functions. You can get the <a href="hw1files/driver.cpp">driver.cpp file 
at this link</a>, or you can copy it from your CS account with the unix 
cp command: ( <tt><b>cp ~myers/c++prog/hw1/driver.cpp .</b></tt> ).

<p>I have also provided the output from the <a
href="hw1files/sample.txt">sample execution of my driver.cpp program at
this link</a>.&nbsp; Your class declaration and definition files must work
with my main program, as-is (do not change my program to make your code
work!). You are encouraged to write your own driver routines to further
test the functionality of your class, as well. Most questions about the
required behavior of the class can be determined by carefully examining my
driver program and the sample execution. <b>Keep in mind</b>, this is just
a <b>sample</b>. Your class must meet the requirements listed
above in the specification -- not <b>just</b> satisfy <b>this</b> driver
program. (For instance, I haven't tested <b>every</b> illegal fill
character in this driver program -- I've just shown a sample). Your class
will be tested with a larger set of calls than this driver program
represents.
<br>&nbsp;
</li>

<li><b>General Requirements</b>
<ul>
<li>
No global variables, other than constants!</li>

<li>
All member data of your class must be private</li>
<!--
<li>
<b>Use the <tt>const</tt> qualifier on member functions wherever it is 
appropriate.</b></li>
-->
<li>
You will need to use the <tt>&lt;iostream&gt;</tt> library for
output.&nbsp; You may use the <tt>&lt;iomanip&gt;</tt> library for
formatting your decimal output to two places, if you wish to use 
the parameterized stream manipulators, but you may 
<b>not</b> use <tt>setw()</tt> or other output formatting functions 
for drawing the actual figure.  You may use the <tt>&lt;cmath&gt;</tt> 
library</li>

<li>Do not use langauge or library features that are C++11-only</li>

<li>
When you write source code, it should be readable and well-documented.
 <ul>
 <li><a href="../notes/style.html">Here are some general notes on style
     guidelines</a></li>
 </ul>
</li>

<li>
Your <tt>house.h</tt> file should contain the class declaration 
only.&nbsp; The <tt>house.cpp</tt> file should contain the member 
function definitions.</li>

</ul>

</li>
</ol>

<hr WIDTH="100%">
<h3>
Submitting:</h3>

TBA shortly

<!--
Program submissions should be done through the submission web page, 
linked from the main course web site.  You will need your submission 
password -- these have been uploaded to your Grade lookup in the 
Blackboard page. If you have trouble accessing this, see me or your 
recitation instructor ASAP (or e-mail, if you can't come see me) to 
obtain your password. Do <b>not</b> send program submissions through 
e-mail -- e-mail attachments will <b>not</b> be accepted as valid 
submissions.
-->

<p><b>General Advice</b> - e-mail a copy of your finished homework files
to your own FSU account.  This e-mail will have a time stamp that shows
when they were sent (i.e. before the due date would be the best idea) ,
and they will also serve as a backup.  It's not a bad idea to keep a   
copy on your CS account (as well as on a personal computer) -- backing          
up your work is a GOOD thing!

<p>For HW #1, submit the following files
<pre>
 house.h
 house.cpp
</pre>

<p>Make sure your filenames are these exact names, and do not submit the
driver.cpp file.

</body>
</html>
